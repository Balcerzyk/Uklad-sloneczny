<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<script type="text/javascript">
/*//
*******************************************
*  _                    _             _   *
* | |    __ _ _ __ ___ | |__       _-(")- *
* | |   / _` | '_ ` _ \| '_ \    `%%%%%   *
* | |__| (_| | | | |_| | |_) | _  // \\   *
* |_____\__,_|_| |_| |_|_.__/_| |__  ___  *
*                  | |   / _` | '_ \/ __| *
*                  | |__| (_| | |_) \__ \ *
*  2019-05-21      |_____\__,_|_.__/|___/ *
*******************************************
//*/
var gl;
var shaderProgram;
var uPMatrix;
var vertexPositionBuffer;
var vertexColorBuffer;
var vertexCoordsBuffer;
var vertexNormalBuffer;

//Implementacja mnozenia macierzy
function MatrixMul(a, b)
{
  c = [
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  ];
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      c[i * 4 + j] = 0.0;
      for (let k = 0; k < 4; k++) {
        c[i * 4 + j] += a[i * 4 + k] * b[k * 4 + j];
      }
    }
  }

  return c;
}

function CrossProduct(a,b) {
  let s1 = a[1]*b[2] - a[2]*b[1];
  let s2 = a[2]*b[0] - a[0]*b[2];
  let s3 = a[0]*b[1] - a[1]*b[0];
  return [s1,s2,s3];
}

function NormalizeVector(a) {
  let l = a[0]*a[0]+a[1]*a[1]+a[2]*a[2];
  l = Math.sqrt(l);
  return [a[0]/l,a[1]/l,a[2]/l];
}


function CreateBand(n,r1,r2,l1,l2) {
  let vertexPosition = [];
  let vertexColor = [];
  let vertexCoord = [];
  let vertexNormal = [];
  let deltaAlpha = 360/n;
  for(let i=0;i<n;i++) {
    let alpha1 = i*deltaAlpha;
    let alpha2 = (i+1)*deltaAlpha;
    let x1 = r1*Math.cos(alpha1 * Math.PI /180);
    let y1 = l1;
    let z1 = r1*Math.sin(alpha1 * Math.PI /180);
    let x2 = r1*Math.cos(alpha2 * Math.PI /180);
    let y2 = l1;
    let z2 = r1*Math.sin(alpha2 * Math.PI /180);

    let x3 = r2*Math.cos(alpha1 * Math.PI /180);
    let y3 = l2;
    let z3 = r2*Math.sin(alpha1 * Math.PI /180);
    let x4 = r2*Math.cos(alpha2 * Math.PI /180);
    let y4 = l2;
    let z4 = r2*Math.sin(alpha2 * Math.PI /180);

    let n1 = [x1,y1,z1];
    n1 = NormalizeVector(n1);
    let n2 = [x2,y2,z2];
    n2 = NormalizeVector(n2);
    let n3 = [x3,y3,z3];
    n3 = NormalizeVector(n3);
    let n4 = [x4,y4,z4];
    n4 = NormalizeVector(n4);

    vertexPosition.push(...[x1,y1,z1]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[0,0]); vertexNormal.push(...n1);
    vertexPosition.push(...[x2,y2,z2]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[1,0]); vertexNormal.push(...n2);
    vertexPosition.push(...[x4,y4,z4]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[1,1]); vertexNormal.push(...n4);

    vertexPosition.push(...[x1,y1,z1]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[0,0]); vertexNormal.push(...n1);
    vertexPosition.push(...[x4,y4,z4]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[1,1]); vertexNormal.push(...n4);
    vertexPosition.push(...[x3,y3,z3]); vertexColor.push(...[0.5,0.5,0.5]); vertexCoord.push(...[0,1]); vertexNormal.push(...n3);
  }
  return [vertexPosition, vertexColor, vertexCoord, vertexNormal];
}

//Implementacja transpozycji macierzy
function MatrixTranspose(a)
{
  c = [
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  ];
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      c[i * 4 + j] = a[j * 4 + i];
    }
  }

  return c;
}

function startGL()
{
  //Init OpenGL context
  let canvas = document.getElementById('canvas3D');
  gl = canvas.getContext('experimental-webgl');
  gl.viewportWidth = canvas.width;
  gl.viewportHeight = canvas.height;

  //Init Shaders
  const vertextShaderSource = `
    precision highp float;
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexColor;
    attribute vec2 aVertexCoords;
    attribute vec3 aVertexNormal;
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform float uBrightness;

    varying vec3 vPos;
    varying vec3 vColor;
    varying vec2 vTexUV;
    varying vec3 vNormal;
    void main(void) {
      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
      gl_PointSize = 3.0;
      vColor = aVertexColor * uBrightness;
      vTexUV = aVertexCoords;
      vPos = aVertexPosition;
      vNormal = aVertexNormal;
    }
  `;
  const fragmentShaderSource = `
    precision highp float;
    varying vec3 vPos;
    varying vec3 vColor;
    varying vec2 vTexUV;
    varying vec3 vNormal;
    uniform sampler2D uSampler;
    uniform vec3 uLightPosition;
	uniform bool sun;
    void main(void) {
       vec3 lightDirection = normalize(uLightPosition - vPos);
       float brightness = max(dot(vNormal,lightDirection), 0.0);
	   if(sun) brightness = 1.0;
       gl_FragColor = clamp(texture2D(uSampler,vTexUV) * vec4(brightness,brightness,brightness,1.0),0.0,1.0);

    }
  `;
  let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  let vertexShader   = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(fragmentShader, fragmentShaderSource);
  gl.shaderSource(vertexShader, vertextShaderSource);
  gl.compileShader(fragmentShader);
  gl.compileShader(vertexShader);
  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
    alert(gl.getShaderInfoLog(fragmentShader));
    return null;
  }

  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
    alert(gl.getShaderInfoLog(vertexShader));
    return null;
  }

  shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, vertexShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) alert('Could not initialise shaders');
  
  let vertexPosition = [];
  let vertexColor = [];
  let vertexCoords = [];
  let vertexNormal = [];
  
  let m = 30;
  let n = 30;
  let R = 1;

  let deltaBeta = 180/m;
  for(let i=-m/2;i<m/2;i++) {
      let beta1 = i*deltaBeta;
      let beta2 = (i+1)*deltaBeta;
      let r1 = R*Math.cos(beta1 * Math.PI/180);
      let l1 = R*Math.sin(beta1 * Math.PI/180);
      let r2 = R*Math.cos(beta2 * Math.PI/180);
      let l2 = R*Math.sin(beta2 * Math.PI/180);
      let [localVertexPosition,localVertexColor, localVertexCoord, localVertexNormal] = CreateBand(n,r1,r2,l1,l2,i,m);
      vertexPosition.push(...localVertexPosition);
      vertexColor.push(...localVertexColor);
      vertexCoords.push(...localVertexCoord);
      vertexNormal.push(...localVertexNormal);
  }
  
  vertexPositionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPosition), gl.STATIC_DRAW);
  vertexPositionBuffer.itemSize = 3;
  vertexPositionBuffer.numItems = vertexPosition.length/(9);

  vertexCoordsBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexCoords), gl.STATIC_DRAW);
  vertexCoordsBuffer.itemSize = 2;
  vertexCoordsBuffer.numItems = vertexCoordsBuffer.length/6;

  vertexColorBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexColor), gl.STATIC_DRAW);
  vertexColorBuffer.itemSize = 3;
  vertexColorBuffer.numItems = vertexColorBuffer.length/9;

  vertexNormalBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormal), gl.STATIC_DRAW);
  vertexNormalBuffer.itemSize = 3;
  vertexNormalBuffer.numItems = vertexNormalBuffer.length/9;

  textureBufferSun = gl.createTexture();
  var textureSun = new Image();
  textureSun.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferSun);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureSun);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureSun.src="suntex.png";
  textureBufferMer = gl.createTexture();
  var textureMer = new Image();
  textureMer.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferMer);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureMer);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureMer.src="mercurytex.png";
  
  textureBufferVen = gl.createTexture();
  var textureVen = new Image();
  textureVen.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferVen);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureVen);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureVen.src="venustex.png";
  
  textureBufferEar = gl.createTexture();
  var textureEar = new Image();
  textureEar.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferEar);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureEar);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureEar.src="earthtex.png";
  
  textureBufferMar = gl.createTexture();
  var textureMar = new Image();
  textureMar.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferMar);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureMar);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureMar.src="marstex.png";  
  textureBufferJup = gl.createTexture();
  var textureJup = new Image();
  textureJup.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferJup);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureJup);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureJup.src="jupitertex.png";
  textureBufferSat = gl.createTexture();
  var textureSat = new Image();
  textureSat.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferSat);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureSat);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureSat.src="saturntex.png";
  
  textureBufferUra = gl.createTexture();
  var textureUra = new Image();
  textureUra.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferUra);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureUra);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureUra.src="uranustex.png";
  textureBufferNep = gl.createTexture();
  var textureNep = new Image();
  textureNep.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, textureBufferNep);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureNep);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  textureNep.src="neptunetex.png";
  
  //Init Matrices
  let aspect = gl.viewportWidth / gl.viewportHeight;
  let fov = 45.0 * Math.PI / 180.0;
  let zFar = 5000.0;
  let zNear = 0.1;
  uPMatrix = [
   1.0 / (aspect * Math.tan(fov / 2)), 0                        , 0                                    , 0,
   0                                 , 1.0 / (Math.tan(fov / 2)), 0                                    , 0,
   0                                 , 0                        , -(zFar + zNear) / (zFar - zNear)     , -1,
   0                                 , 0                        , -(2 * zFar * zNear) / (zFar - zNear), 0.0,
  ];
  Tick();
}

var angle = 20.0;
var angleZ = 0.0;
var angleY = 0.0;
var angleX = 0.0;
var translateZ = -300.0;
var translateY = 0.0;
var translateX = 0.0;

var translateZ2 = 0.0;
var translateY2 = 0.0;
var translateX2 = 0.0;

var lightX = -15;
var lightY = 0;
var lightZ = 0;

function Tick()
{
	angleY=angleY+0.1;
  let uMVMatrix = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 0, 1,
 ]);

  let uMVTranslateConstX0_4 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0.4, 0, 0, 1,
  ]);
  let uMVTranslateConstX0_6 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0.6, 0, 0, 1,
  ]);
  let uMVTranslateConstX0_8 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0.8, 0, 0, 1,
  ]);
  let uMVTranslateConstX1_0 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  1.0, 0, 0, 1,
  ]);
  let uMVTranslateConstX1_2 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  1.2, 0, 0, 1,
  ]);

  let uMVTranslateConstY = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 2, 0, 1,
  ]);

  let uMVTranslateConstZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 2, 1,
  ]);

  let uMVTranslateConstmX = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  -2, 0, 0, 1,
  ]);

  let uMVTranslateConstmY = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, -2, 0, 1,
  ]);

  let uMVTranslateConstmZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, -2, 1,
  ]);

  let uMVTranslateZ = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  translateX, translateY, translateZ, 1,
  ]);

  let uMVTranslateZ2 = MatrixTranspose([
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  translateX2, translateY2, translateZ2, 1,
  ]);

  let uMVRotZ = MatrixTranspose([
  +Math.cos(angleZ*Math.PI/180.0),+Math.sin(angleZ*Math.PI/180.0),0,0,
  -Math.sin(angleZ*Math.PI/180.0),+Math.cos(angleZ*Math.PI/180.0),0,0,
  0,0,1,0,
  0,0,0,1
  ]);
  let uMVRotY = MatrixTranspose([
  +Math.cos(angleY*Math.PI/180.0),0,-Math.sin(angleY*Math.PI/180.0),0,
  0,1,0,0,
  +Math.sin(angleY*Math.PI/180.0),0,+Math.cos(angleY*Math.PI/180.0),0,
  0,0,0,1
  ]);
  let uMVRotX = MatrixTranspose([
  1,0,0,0,
  0,+Math.cos(angleX*Math.PI/180.0),+Math.sin(angleX*Math.PI/180.0),0,
  0,-Math.sin(angleX*Math.PI/180.0),+Math.cos(angleX*Math.PI/180.0),0,
  0,0,0,1
  ]);

  uMVMatrix = MatrixMul(uMVRotX,uMVMatrix);
  uMVMatrix = MatrixMul(uMVRotY,uMVMatrix);
  uMVMatrix = MatrixMul(uMVRotZ,uMVMatrix);
  uMVMatrix = MatrixMul(uMVTranslateZ,uMVMatrix);

  //Render Scene
  gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
  gl.clearColor(0.0,0.0,0.0,1.0);
  gl.clearDepth(1.0);                 // Clear everything
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.useProgram(shaderProgram)

  gl.enable(gl.DEPTH_TEST);           // Enable depth testing
  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things


  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexNormal"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexNormal"), vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);


drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 40,0,"sun", 2);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 0.5,55,"mercury", 2);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 3,75,"venus", 5);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 3,95,"earth", 5);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 2,115,"mars", 6);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 7,155,"jupiter",4);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 6,200,"saturn", 4);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 4.5,250,"uranus", 5);
drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, 4,290,"neptune", 5);

  setTimeout(Tick,1);
}

function drawBall(uMVMatrix, vertexPositionBuffer, vertexCoordsBuffer, r, shift, name, rotateSpeed){
  let shiftMatrix=[
		1,0,0,shift,
		0,1,0,0,
		0,0,1,0,
		0,0,0,1
  ];
  let sizeMatrix=[
		r,0,0,0,
		0,r,0,0,
		0,0,r,0,
		0,0,0,1
  ];
  let rotateMatrix=[
	  +Math.cos(rotateSpeed*angleY*Math.PI/180.0),0,-Math.sin(rotateSpeed*angleY*Math.PI/180.0),0,
	  0,1,0,0,
	  +Math.sin(rotateSpeed*angleY*Math.PI/180.0),0,+Math.cos(rotateSpeed*angleY*Math.PI/180.0),0,
	  0,0,0,1
  ];
  
  uMVMatrix = MatrixMul(uMVMatrix,shiftMatrix);
  uMVMatrix = MatrixMul(uMVMatrix,sizeMatrix);
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uPMatrix"), false, new Float32Array(uPMatrix)); //Pass matrices
  gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix)));

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexColor"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexColor"), vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexCoords"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexCoordsBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexCoords"), vertexCoordsBuffer.itemSize, gl.FLOAT, false, 0, 0);

  gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexNormal"));  //Pass the geometry
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
  gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexNormal"), vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);

  var loc = gl.getUniformLocation(shaderProgram, "sun");
  if(name == "sun")
	gl.uniform1i(loc, true);
  else 
	gl.uniform1i(loc, false);
	
  gl.uniform1f(gl.getUniformLocation(shaderProgram, "uBrightness"), 0.6);

  gl.uniform3f(gl.getUniformLocation(shaderProgram, "uLightPosition"),lightX,lightY,lightZ);

  gl.activeTexture(gl.TEXTURE0);
  switch(name){
	  case "sun": gl.bindTexture(gl.TEXTURE_2D, textureBufferSun); break;
	  case "mercury": gl.bindTexture(gl.TEXTURE_2D, textureBufferMer); break;
	  case "venus": gl.bindTexture(gl.TEXTURE_2D, textureBufferVen); break;
	  case "earth": gl.bindTexture(gl.TEXTURE_2D, textureBufferEar); break;
	  case "mars": gl.bindTexture(gl.TEXTURE_2D, textureBufferMar); break;
	  case "jupiter": gl.bindTexture(gl.TEXTURE_2D, textureBufferJup); break;
	  case "saturn": gl.bindTexture(gl.TEXTURE_2D, textureBufferSat); break;
	  case "uranus": gl.bindTexture(gl.TEXTURE_2D, textureBufferUra); break;
	  default: gl.bindTexture(gl.TEXTURE_2D, textureBufferNep);
  };
  gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);
  uMVMatrix = MatrixMul(uMVMatrix,rotateMatrix);
  gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*3); //Invoke drawing
}

function keydown(e)
{
 if(e.keyCode==87) angleX=angleX+1.0;
 if(e.keyCode==83) angleX=angleX-1.0;
 if(e.keyCode==68) angleY=angleY+1.0;
 if(e.keyCode==65) angleY=angleY-1.0;
 if(e.keyCode==81) angleZ=angleZ+1.0;
 if(e.keyCode==69) angleZ=angleZ-1.0;

 if(e.keyCode==39) translateX=translateX+1;
 if(e.keyCode==37) translateX=translateX-1;
 if(e.keyCode==38) translateY=translateY+1;
 if(e.keyCode==40) translateY=translateY-1;
 if(e.keyCode==34) translateZ=translateZ+1;
 if(e.keyCode==33) translateZ=translateZ-1;

 if(e.keyCode==76) lightX=lightX+0.1;
 if(e.keyCode==74) lightX=lightX-0.1;
 if(e.keyCode==73) lightY=lightY+0.1;
 if(e.keyCode==75) lightY=lightY-0.1;
 if(e.keyCode==85) lightZ=lightZ+0.1;
 if(e.keyCode==79) lightZ=lightZ-0.1;
}
</script>
</head>
<body onload="startGL()" onkeydown="keydown(event)">
<canvas id="canvas3D" width="640" height="480" style="border: solid black 1px"></canvas>
</body>
</html>